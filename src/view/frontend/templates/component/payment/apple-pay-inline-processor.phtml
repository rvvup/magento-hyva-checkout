<?php
declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var \Rvvup\PaymentsHyvaCheckout\Magewire\Checkout\Payment\ApplePayProcessor $magewire */
/** @var Hyva\Theme\ViewModel\HyvaCsp $hyvaCsp */
?>
<div id="rvvup-apple-pay-inline" data-quoteamount="<?php echo $magewire->quoteAmount; ?>" data-quotecurrency="<?php echo $magewire->quoteCurrency; ?>">
    <style>
        #payment-method-option-rvvup_APPLE_PAY {
            display: block;
        }
        .rvvup_APPLE_PAY_place_order_button {
            display: none;
        }
    </style>
    <script>
        (() => {
            const getQuoteTotal = () => {
                const dataSet = document.querySelector('#rvvup-apple-pay-inline').dataset;
                return {
                    amount: dataSet.quoteamount,
                    currency: dataSet.quotecurrency
                };
            };
            const triggerApplePayDisplayEvent = () => {
                if (!$showApplePay) {
                    window.dispatchEvent(new CustomEvent('rvvup:methods:apple-pay:hide'));
                }
            };
            let applePayPromise = window.rvvup_sdk.createPaymentMethod("APPLE_PAY", {
                checkoutSessionKey: rvvup_parameters.checkout.token,
                total: getQuoteTotal(),
            }).catch(e => {
                console.error("Error creating Apple Pay payment method", e);
            });
            let $showApplePay = true;
            let $applePaySelected = false;

            applePayPromise.then(applePay => {
                applePay.on("ready", async () => {
                    let placeOrderButton = getPlaceOrderButton();
                    const divId = "rvvup-apple-pay-button";
                    if(document.getElementById(divId)){
                        return;
                    }
                    const applePayButtonDiv = document.createElement('div');
                    applePayButtonDiv.id = divId;
                    applePayButtonDiv.className = 'rvvup-applepay-button z-0';
                    applePayButtonDiv.style.display = $applePaySelected ? 'block' : 'none';
                    if (placeOrderButton.className && placeOrderButton.className.indexOf("w-full") > -1) {
                        applePayButtonDiv.className += ' w-full';
                    }
                    placeOrderButton.appendChild(applePayButtonDiv);
                    placeOrderButton.parentNode.insertBefore(applePayButtonDiv, placeOrderButton);

                    await applePay.mount({
                        selector: "#rvvup-apple-pay-button",
                    });
                    $showApplePay = await applePay.canMakePayment();
                    triggerApplePayDisplayEvent();
                });
                applePay.on("click", () => {
                    applePay.update({total: getQuoteTotal()});
                });
                applePay.on("beforePaymentAuth", async () => {
                    const component = Magewire.find('<?= $escaper->escapeJs($block->getNameInLayout()) ?>');
                    await component.createPaymentSession(rvvup_parameters.checkout.id)
                    return {
                        paymentSessionId: component.paymentSessionResult.paymentSessionId
                    };
                });
                applePay.on("paymentAuthorized", () => {
                    const component = Magewire.find('<?= $escaper->escapeJs($block->getNameInLayout()) ?>');
                    let magewire = document.getElementById('magewire-loader');
                    magewire.children[0].style.display = 'block';
                    window.location.href = component.paymentSessionResult.redirectUrl;
                });
                applePay.on("paymentFailed", (data) => {
                    window.dispatchMessages && window.dispatchMessages([{
                        type: 'error',
                        text: 'Payment ' + data.reason
                    }], 5000);
                });
            });
            window.addEventListener('checkout:payment:method-activate', triggerApplePayDisplayEvent);
            window.addEventListener('checkout:step:loaded', triggerApplePayDisplayEvent);

            window.addEventListener('rvvup:methods:apple-pay:hide', () => {
                let element = document.getElementById("payment-method-option-rvvup_APPLE_PAY");
                if (element) {
                    element.parentElement.removeChild(element);
                }
            });

            window.addEventListener('checkout:payment:method-activate', async event => {
                let placeOrderButton = getPlaceOrderButton();
                const divId = "rvvup-apple-pay-button";

                if (event.detail.method !== 'rvvup_APPLE_PAY') {
                    placeOrderButton.classList.remove('rvvup_APPLE_PAY_place_order_button');
                    if (document.getElementById(divId)) {
                        document.getElementById(divId).style.display = 'none';
                    }
                    $applePaySelected = false;
                    return;
                }

                $applePaySelected = true;

                /*
                This code finds the magewire component, but the workaround is required because the component may not be
                immediately available when the script is executed. This is related to an issue in Hyva Checkout 1.3.0 or
                later. This is currently the suggested workaround provided by Hyva:
                https://gitlab.hyva.io/hyva-checkout/checkout/-/issues/418
                 */
                let component;
                try {
                    component = Magewire.find('<?= $escaper->escapeJs($block->getNameInLayout()) ?>');
                } catch (error) {
                    await Livewire.onLoad(() => {
                        component = Magewire.find('<?= $escaper->escapeJs($block->getNameInLayout()) ?>');
                    });
                }
                hyvaCheckout.payment.activate('rvvup_APPLE_PAY', {
                    initialize() {
                        placeOrderButton.classList.add('rvvup_APPLE_PAY_place_order_button');
                        document.getElementById(divId).style.display = 'block';
                    },
                    placeOrderViaJs() {
                        return document.querySelector('[wire\\:key="rvvup_APPLE_PAY"].active') !== null;
                    },

                    placeOrder() {
                        return component.placeOrder();
                    }
                }, document.querySelector('[wire\\:key="rvvup_APPLE_PAY"].active'));

            });
        })();
    </script>
<?php $hyvaCsp->registerInlineScript() ?>
</div>
