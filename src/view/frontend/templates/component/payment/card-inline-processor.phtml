<?php
declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var \Rvvup\PaymentsHyvaCheckout\Magewire\Checkout\Payment\CardProcessor $magewire */
/** @var Hyva\Theme\ViewModel\HyvaCsp $hyvaCsp */
?>
<div wire:ignore>
    <div x-data="cardInlineProcessor"
         x-init="initRvvup">
        <?php if ($magewire->showForm()): ?>
            <div id="rvvup-card-form">
                <form id="st-form" method="POST">
                    <div id="st-card-number" class="rvvup-card-field rvvup-card-number w-full"></div>

                    <div class="flex w-full flex-row">
                        <div id="st-expiration-date" class="rvvup-card-field rvvup-card-expiry mr-4 basis-1/2"></div>
                        <div id="st-security-code" class="rvvup-card-field rvvup-card-security-code ml-4 basis-1/2"></div>
                    </div>
                    <input type="submit" id="tp_place_order" class="hidden">
                </form>
            </div>
        <?php endif; ?>
        <?php if (!$magewire->showForm()): ?>
            <div wire:ignore>
                <iframe class="rvvup-summary w-full"
                        allowtransparency="true"
                        src="<?= $escaper->escapeHtmlAttr($magewire->getIframeUrl()); ?>"></iframe>
            </div>
        <?php endif; ?>

    </div>
    <script>
        window.addEventListener('checkout:payment:method-activate', event => {
            if (event.detail.method !== 'rvvup_CARD') {
                return;
            }
            const activatePayment = function() {
                console.log("initted card 3");

                hyvaCheckout.payment.activate(event.detail.method, {
                    placeOrderViaJs() {
                        return document.querySelector('[wire\\:key="'+event.detail.method+'"].active') !== null;
                    },

                    placeOrder() {
                    }
                }, document.querySelector('[wire\\:key="'+event.detail.method+'"].active'));            };

            if (hyvaCheckout.main.isApiActive()) {
                activatePayment();
                return;
            }

            window.addEventListener('checkout:init:payment', activatePayment, {
                once: true
            });


        });

        function cardInlineProcessor() {
            return {
                initRvvup() {
                    console.log("initted card");
                    let ST = null;

                    window.addEventListener('checkout:validation:success', () => {
                        const component = Magewire.find('<?= $escaper->escapeJs($block->getNameInLayout()) ?>');
                        let magewire = document.getElementById('magewire-loader');
                        magewire.children[0].style.display = 'block';

                        component.loadPaymentActions().then(() => {
                            if (!component.paymentActions || !component.paymentActions.authorization) {
                                document.getElementById('magewire-loader').children[0].style.display = 'none';
                                return;
                            }
                            ST.updateJWT(component.paymentActions.authorization.value);
                            document.getElementById('tp_place_order').click();
                        });
                    });


                    const component = this.$wire;
                    console.log("initted card 2");
                    ST = SecureTrading({
                        jwt: '<?= $magewire->getInitializationToken() ?>',
                        animatedCard: true,
                        livestatus: <?= $magewire->getLiveStatus() ?>,
                        buttonId: "tp_place_order",
                        deferInit: true,
                        submitOnSuccess: false,
                        panIcon: true,
                        stopSubmitFormOnEnter: true,
                        formId: "st-form",
                        submitCallback: function (data) {
                            let threeD = data.threedresponse || null;
                            let authorization = data.jwt;

                            component.handleCallback(authorization, threeD);
                        },
                        errorCallback: function () {
                            /** Hide loader */
                            document.getElementById('magewire-loader').children[0].style.display = 'none';
                            var url = window.BASE_URL + 'rvvup/payment/cancel' + '?form_key=' + hyva.getFormKey();
                            fetch(
                                url,
                                {
                                    method: 'post',
                                    headers: {contentType: 'application/json'}
                                }
                            )
                        },
                        translations: {
                            "Card number": '<?php echo $magewire->getTranslation('label', 'cardNumber', 'Card Number'); ?>',
                            "Expiration date": '<?php echo $magewire->getTranslation('label', 'expiryDate', 'Expiration Date'); ?>',
                            "Security code": '<?php echo $magewire->getTranslation('label', 'securityCode', 'Security Code'); ?>',
                            Pay: '<?php echo $magewire->getTranslation('button', 'pay', 'Pay'); ?>',
                            Processing: '<?php echo $magewire->getTranslation('button', 'processing', 'Processing'); ?>',
                            "Field is required":
                                '<?php echo $magewire->getTranslation('error', 'fieldRequired', 'Field is required'); ?>',
                            "Value is too short":
                                '<?php echo $magewire->getTranslation('error', 'valueTooShort', 'Value is too short'); ?>',
                            "Value mismatch pattern":
                                '<?php echo $magewire->getTranslation('error', 'valueMismatch', 'Value is invalid'); ?>',
                        },
                        styles: {
                            "background-color-input": "#FFFFFF",
                            "border-color-input": "#EBEBF2",
                            "border-radius-input": "8px",
                            "border-size-input": "1px",
                            "color-input": "#050505",
                            "border-color-input-error": "#ff4545",
                            "color-label": "#050505",
                            "position-left-label": "0.5rem",
                            "font-size-label": "1.2rem",
                            "font-size-message": "1rem",
                            "space-outset-message": "0rem 0px 0px 0.5rem",
                        },
                    });

                    ST.Components();

                }
            };
        }

        window.addEventListener('alpine:init', () => Alpine.data('cardInlineProcessor', cardInlineProcessor), {once: true});
    </script>
<?php $hyvaCsp->registerInlineScript() ?>
</div>
